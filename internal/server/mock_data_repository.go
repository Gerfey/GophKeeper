// Code generated by MockGen. DO NOT EDIT.
// Source: data_service.go

// Package server is a generated GoMock package.
package server

import (
	context "context"
	reflect "reflect"

	models "github.com/gerfey/gophkeeper/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockDataRepository is a mock of DataRepository interface.
type MockDataRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDataRepositoryMockRecorder
}

// MockDataRepositoryMockRecorder is the mock recorder for MockDataRepository.
type MockDataRepositoryMockRecorder struct {
	mock *MockDataRepository
}

// NewMockDataRepository creates a new mock instance.
func NewMockDataRepository(ctrl *gomock.Controller) *MockDataRepository {
	mock := &MockDataRepository{ctrl: ctrl}
	mock.recorder = &MockDataRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataRepository) EXPECT() *MockDataRepositoryMockRecorder {
	return m.recorder
}

// CreateData mocks base method.
func (m *MockDataRepository) CreateData(ctx context.Context, data *models.Data) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateData", ctx, data)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateData indicates an expected call of CreateData.
func (mr *MockDataRepositoryMockRecorder) CreateData(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateData", reflect.TypeOf((*MockDataRepository)(nil).CreateData), ctx, data)
}

// Delete mocks base method.
func (m *MockDataRepository) Delete(ctx context.Context, id, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDataRepositoryMockRecorder) Delete(ctx, id, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDataRepository)(nil).Delete), ctx, id, userID)
}

// GetAll mocks base method.
func (m *MockDataRepository) GetAll(ctx context.Context, userID int64) ([]*models.Data, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, userID)
	ret0, _ := ret[0].([]*models.Data)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockDataRepositoryMockRecorder) GetAll(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockDataRepository)(nil).GetAll), ctx, userID)
}

// GetByID mocks base method.
func (m *MockDataRepository) GetByID(ctx context.Context, id, userID int64) (*models.Data, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id, userID)
	ret0, _ := ret[0].(*models.Data)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockDataRepositoryMockRecorder) GetByID(ctx, id, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockDataRepository)(nil).GetByID), ctx, id, userID)
}

// Update mocks base method.
func (m *MockDataRepository) Update(ctx context.Context, data *models.Data) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockDataRepositoryMockRecorder) Update(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDataRepository)(nil).Update), ctx, data)
}
